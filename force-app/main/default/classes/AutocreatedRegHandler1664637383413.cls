//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class AutocreatedRegHandler1664637383413 implements Auth.RegistrationHandler{
global boolean canCreateUser(Auth.UserData data) {

	return true;
}

global User createUser(Id portalId, Auth.UserData data){
    String userName;   
    if(data.attributeMap.containsKey('sfdc_networkid')) {
            userName = data.email;
         }
        List<User> userList = [Select Id, Name, Email, UserName From User 
                                      Where ( Email =: userName)
                                      AND isActive = true
                                      ];
	if(userList != null && userList.size() > 0) {
		 User userdata = userList.get(0);
            return userdata;
    }else{
        return null;
    }
  //  System.debug('data'+Data);
   // System.debug('dataemail'+ data.email);
	/*if(data.attributeMap.containsKey('sfdc_networkid')) {       
        RecordType contactType =[SELECT Id, Name, IsActive FROM RecordType where Name ='Resource'];
        System.debug('contactType'+contactType);
        Contact contactData =[SELECT Id, LastName,Email, FirstName,RecordTypeId FROM Contact where RecordTypeId =: contactType.Id and Email =: data.email];
        
        System.debug('contactData'+contactData);
		User u;
      //  If (contactData.Email == data.email){
      // if(contactData.Email.equals(data.email)){
		 u = new User();
		Profile p = [SELECT Id FROM profile WHERE name='TM Customer Community'];
            System.debug('Profile'+p);
            
		u.username = data.email;
		u.email = data.email;
		u.lastName = data.lastName;
		u.firstName = data.firstName;
		String alias = data.firstName;
		//Alias must be 8 characters or less
		if(alias.length() > 8) {
			alias = alias.substring(0,5);
		}
		u.alias = alias;
        u.CommunityNickname = data.firstName+ data.lastName;
		u.languagelocalekey = 'en_US';
		u.localesidkey = 'en_US';
		u.emailEncodingKey = 'UTF-8';
		u.timeZoneSidKey = 'America/Los_Angeles';
		u.profileId = p.Id;
		u.contactId = contactData.Id;
            
       Database.DMLOptions dmo = new Database.DMLOptions();
        dmo.EmailHeader.triggerUserEmail = true;       
        dmo.EmailHeader.triggerOtherEmail = true;
        dmo.EmailHeader.triggerAutoResponseEmail = true;       
        dmo.optAllOrNone = false;

        u.setOptions(dmo);   
                       
        Insert u;
        System.debug('User is created'+u);
      // }
		return u;
	} else {

        System.debug('Null is genrated');
		return null;
	}*/
}

global void updateUser(Id userId, Id portalId, Auth.UserData data){
	User u = new User(id=userId);
	u.email = data.email;
	u.lastName = data.lastName;
	u.firstName = data.firstName;

	update(u);
}
}